services:
    # Nginx Reverse Proxy
    nginx:
        image: nginx:alpine
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/logs:/var/log/nginx
        depends_on:
            - api
            - user-service
            - user
        restart: unless-stopped
        networks:
            - app-network

    # API Gateway / Main API Service
    api:
        build:
            context: ./api
            dockerfile: Dockerfile
        expose:
            - '5000'
        environment:
            - NODE_ENV=${NODE_ENV}
            - USER_SERVICE_URL=${USER_SERVICE_URL}
            - JWT_SECRET=${JWT_SECRET}
            - MONGO_URI=${MONGO_URI}
            - MONGO_USER=${MONGO_USER}
            - MONGO_PW=${MONGO_PW}
            - REDIS_PW=
        depends_on:
            - user-service
            - redis
            - mongodb
        restart: unless-stopped
        networks:
            - app-network

    # User & Auth Microservice
    user-service:
        build:
            context: ./user-service
            dockerfile: Dockerfile
        expose:
            - '3001'
        volumes:
            - user_uploads:/app/uploads
        environment:
            - NODE_ENV=${NODE_ENV}
            - DB_HOST=${DB_HOST}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_NAME=${DB_NAME}
            - DB_PORT=${DB_PORT}
            - REDIS_URL=${REDIS_URL}
            - JWT_SECRET=${JWT_SECRET}
            - CAT_NAME=${CAT_NAME}
            - EMAIL_USER=${EMAIL_USER}
            - EMAIL_PASS=${EMAIL_PASS}
            - BOT_ID=${BOT_ID}
            - BOT_PW=${BOT_PW}
            - BOT_EMAIL=${BOT_EMAIL}
        depends_on:
            - userdb
            - redis
        restart: unless-stopped
        networks:
            - app-network

    # Frontend Service
    user:
        build:
            context: ./user
            dockerfile: Dockerfile
        expose:
            - '3000'
        volumes:
            - ./user/src:/app/src
            - ./user/package.json:/app/package.json
            - ./user/package-lock.json:/app/package-lock.json
            - ./user/tsconfig.json:/app/tsconfig.json
            - /app/node_modules
        environment:
            - NODE_ENV=${NODE_ENV}
            - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        restart: unless-stopped
        networks:
            - app-network

    # MySQL Database for User Service
    userdb:
        image: mysql:8.0
        environment:
            - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
            - MYSQL_DATABASE=${DB_NAME}
        expose:
            - '3306'
        volumes:
            - userdb_data:/var/lib/mysql
            - ./userdb/init:/docker-entrypoint-initdb.d
        restart: unless-stopped
        networks:
            - app-network

    bot:
        build:
            context: ./bot
            dockerfile: Dockerfile
        environment:
            - NODE_ENV=${NODE_ENV}
            - USER_SERVICE_URL=${USER_SERVICE_URL}
            - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
            - DISCORD_BOT_CLIENT_ID=${DISCORD_BOT_CLIENT_ID}
            - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
            - BOT_ID=${BOT_ID}
            - BOT_EMAIL=${BOT_EMAIL}
            - BOT_PW=${BOT_PW}
            - BOT_NICKNAME=${BOT_NICKNAME}
        restart: unless-stopped
        networks:
            - app-network

    requestdb:
        image: mysql:8.0
        environment:
            - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
            - MYSQL_DATABASE=${DB_NAME}
        expose:
            - '3306'
        volumes:
            - ./requestdb/init:/docker-entrypoint-initdb.d
        restart: unless-stopped
        networks:
            - app-network

    # Redis for Session Management
    redis:
        image: redis:7-alpine
        expose:
            - '6379'
        volumes:
            - redis_data:/data
        command: redis-server --appendonly yes
        restart: unless-stopped
        networks:
            - app-network

    # MongoDB for other services (optional)
    mongodb:
        image: mongo:6
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PW}
        expose:
            - '27017'
        volumes:
            - mongodb_data:/data/db
        restart: unless-stopped
        networks:
            - app-network

volumes:
    userdb_data:
    redis_data:
    mongodb_data:
    user_uploads:

networks:
    app-network:
        driver: bridge
